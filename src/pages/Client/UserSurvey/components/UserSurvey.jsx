import { useEffect, useState } from 'react'
import { Button, Card, message } from 'antd'
import styles from '../scss/UserSurvey.module.scss'
import { useNavigate } from 'react-router-dom'
import { useDispatch, useSelector } from 'react-redux'
import { getAllCategory } from 'features/client/category/categoryThunks'
import { CheckCircle } from 'lucide-react'
import { updateSurvey } from 'features/client/Survey/surveyThunks'

export default function SurveyForm() {
  const [selectedTags, setSelectedTags] = useState([])
  const [isSubmitting, setIsSubmitting] = useState(false)
  const navigate = useNavigate()
  const dispatch = useDispatch()
  const { survey } = useSelector(state => state.survey)
  const { categories: cate } = useSelector(state => state.category)

  // L·∫•y danh m·ª•c t·ª´ API n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
  useEffect(() => {
    if (cate.length === 0) {
      dispatch(getAllCategory())
    }
  }, [dispatch, cate.length])

  // Load danh m·ª•c ƒë√£ ch·ªçn t·ª´ survey v√†o state
  useEffect(() => {
    if (survey.data?.interests?.length > 0 && cate.length > 0) {
      const userSelectedCategories = survey.data.interests
        .map(item => {
          // Tr√≠ch xu·∫•t ID th·ª±c s·ª± t·ª´ ƒë·ªëi t∆∞·ª£ng ho·∫∑c d√πng tr·ª±c ti·∫øp n·∫øu l√† string
          const categoryId =
            typeof item.category_id === 'object' && item.category_id._id ? item.category_id._id : item.category_id

          const foundCategory = cate.find(c => c._id === categoryId)
          return foundCategory
            ? {
                category_id: foundCategory._id,
                category_name: foundCategory.name
              }
            : null
        })
        .filter(cat => cat !== null)

      setSelectedTags(userSelectedCategories)
    }
  }, [survey.data, cate])

  // Danh s√°ch danh m·ª•c hi·ªÉn th·ªã
  const categories = cate.map(itemCate => ({
    category_id: itemCate._id,
    category_name: itemCate.name
  }))

  // L·∫•y icon theo danh m·ª•c
  const getCategoryIcon = categoryName => {
    const iconMap = {
      'B·∫•t ƒë·ªông s·∫£n': 'üè†',
      'Xe c·ªô': 'üõµ',
      'ƒê·ªì ƒëi·ªán t·ª≠': 'üì±',
      'ƒê·ªì gia d·ª•ng, n·ªôi th·∫•t, c√¢y c·∫£nh': 'üñº',
      'T·ªß l·∫°nh, m√°y gi·∫∑t, ƒëi·ªÅu h√≤a': 'üõÅ',
      'M·∫π v√† b√©': 'üë∂',
      'Th·ªùi trang': 'üëó',
      'Th√∫ c∆∞ng': 'üê∂',
      'ƒê·ªì ƒÉn, th·ª±c ph·∫©m': 'üçï',
      'Gi·∫£i tr√≠, th·ªÉ thao': 'ü§æ',
      'T·∫•t c·∫£': '‚úîÔ∏è'
    }
    return iconMap[categoryName] || 'üì¶'
  }

  // Ch·ªçn/b·ªè ch·ªçn danh m·ª•c
  const handleTagSelect = category => {
    setSelectedTags(prev =>
      prev.some(tag => tag.category_id === category.category_id)
        ? prev.filter(tag => tag.category_id !== category.category_id)
        : [...prev, category]
    )
  }

  // X·ª≠ l√Ω g·ª≠i l√™n API - c√°ch ti·∫øp c·∫≠n ho√†n to√†n m·ªõi
  const handleSubmit = async () => {
    if (selectedTags.length === 0) {
      message.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt danh m·ª•c')
      return
    }

    try {
      setIsSubmitting(true)

      // T·∫°o m·∫£ng interests v·ªõi format ƒë∆°n gi·∫£n nh·∫•t c√≥ th·ªÉ
      const interests = selectedTags.map(tag => ({
        category_id: tag.category_id,
        category_name: tag.category_name,
        selected_at: new Date().toISOString()
      }))

      console.log('üöÄ D·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i:', interests)

      // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu interests ƒë·ªÉ debug
      console.log('üìä Ki·ªÉm tra c·∫•u tr√∫c:')
      interests.forEach((item, index) => {
        console.log(`- Item ${index}:`)
        console.log(`  category_id type: ${typeof item.category_id}`)
        console.log(`  category_id value: ${item.category_id}`)
      })

      // T·∫°o payload theo c·∫•u tr√∫c m·ªõi
      const payload = {
        interests: interests
      }

      const result = await dispatch(updateSurvey(payload)).unwrap()

      if (result) {
        message.success('ƒê√£ l∆∞u s·ªü th√≠ch c·ªßa b·∫°n th√†nh c√¥ng!')
        navigate('/')
      }
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra khi l∆∞u s·ªü th√≠ch: ' + (error?.message || 'Kh√¥ng x√°c ƒë·ªãnh'))
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className={styles.survey}>
      <div className={styles.survey__container}>
        <div className={styles.survey__info}>
          <h1 className={styles['survey__info-title']}>Kh√°m ph√° s·ªü th√≠ch c·ªßa b·∫°n</h1>
          <p className={styles['survey__info-subtitle']}>T√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p d·ª±a tr√™n s·ªü th√≠ch c√° nh√¢n</p>
          <div className={styles['survey__info-description']}>
            <p>
              Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi kh·∫£o s√°t ng∆∞·ªùi d√πng c·ªßa ch√∫ng t√¥i. B·∫±ng c√°ch chia s·∫ª s·ªü th√≠ch c·ªßa b·∫°n, ch√∫ng t√¥i c√≥
              th·ªÉ gi√∫p b·∫°n k·∫øt n·ªëi v·ªõi nh·ªØng ng∆∞·ªùi c√≥ c√πng m·ªëi quan t√¢m v√† t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu
              c·ªßa b·∫°n.
            </p>
            <p>H√£y ch·ªçn nh·ªØng danh m·ª•c b·∫°n quan t√¢m nh·∫•t ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh kh√°m ph√°!</p>
          </div>
        </div>

        <Card className={styles.survey__card}>
          <div className={styles['survey__step-content']}>
            <div className={styles.survey__field}>
              <label className={styles.survey__label}>
                B·∫°n quan t√¢m ƒë·∫øn lo·∫°i ƒë·ªì n√†o?
                <span className={styles['survey__label-hint']}>Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu danh m·ª•c</span>
              </label>
              <div className={styles.survey__categories}>
                {categories.map(category => (
                  <div
                    key={category.category_id}
                    className={`${styles.survey__category} ${selectedTags.some(tag => tag.category_id === category.category_id) ? styles['survey__category--selected'] : ''}`}
                    onClick={() => handleTagSelect(category)}
                  >
                    <span className={styles['survey__category-icon']}>{getCategoryIcon(category.category_name)}</span>
                    <span className={styles['survey__category-name']}>{category.category_name}</span>
                    <CheckCircle size={14} className={styles['survey__category-check']} />
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className={styles.survey__actions}>
            <Button onClick={() => navigate('/')} danger={true}>
              B·ªè qua
            </Button>
            <Button type="primary" onClick={handleSubmit} disabled={selectedTags.length === 0} loading={isSubmitting}>
              Ho√†n th√†nh
            </Button>
          </div>
        </Card>
      </div>
    </div>
  )
}
